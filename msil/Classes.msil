.assembly Classes {}
/*
    class SampleClass
    {
        private int m_n;
        private string m_s;
        public static int nStatic = 10;
        public SampleClass(int n, string s)
        {
           m_n = n;
           m_s = s;
        }
        }
        public int Number
        {
            get
            {
                return m_n;
            }
        }
        public string String
        {
            get
            {
                return m_s;
            }
        }
    };
    class Class1
    {
        [STAThread]
        static void Main(string[] args)
        {
            SampleClass o = new SampleClass(1, "Sample");
            Console.WriteLine(SampleClass.nStatic.ToString());
            Console.WriteLine(o.Number.ToString());
            Console.WriteLine(o.String);
        }
    }
*/

.class private auto ansi beforefieldinit SampleClass
       extends [mscorlib]System.Object
{
    .field private int32 m_n              // private int m_n;
    .field private string m_s             // private string m_s;
    .field public static int32 nStatic    // public static int
                                          // nStatic;
    // private static constructor generated by compiler
    // (generated to initialize static class member)
    .method private hidebysig specialname rtspecialname static
        void  .cctor() cil managed
    {
        .maxstack  8
 
        // *************************************************
        // nStatic = 10
        // *************************************************
        ldc.i4.s 10            // load constant onto stack
        // The stsfld instruction replaces the value of a static
        // field with a value from the stack
        stsfld     int32 SampleClass::nStatic
 
        ret
    }
 
    // constructor
    // public SampleClass(int n, string s)
    //
    .method public hidebysig specialname rtspecialname 
        instance void  .ctor(int32 n, string s) cil managed
    {
        .maxstack  8
 
        // *************************************************
        // Call base class constructor
        // *************************************************
        ldarg.0         // Load argument 0 onto stack (hidden
                        // pointer to this)
        // call Object constructor
        call       instance void [mscorlib]System.Object::.ctor()
 
        // *************************************************
        // m_n = n
        // *************************************************
        ldarg.0         // Load argument 0 onto stack
                        // (hidden pointer to this)
        ldarg.1         // load argument 1 onto stack (n) 
        // store value n in field m_n in instance pointed
        // by this
        stfld      int32 SampleClass::m_n
 
        // *************************************************
        // m_s = s
        // *************************************************
        ldarg.0         // Load argument 0 onto stack
                        // (hidden pointer to this)
        ldarg.2         // load argument 1 onto stack (s)
        // store value s in field m_s in instance pointed
        // by this
        stfld      string SampleClass::m_s
        ret
    }
 
    // Number property
    .property instance int32 Number()
    {
        // call get_Number
        .get instance int32 SampleClass::get_Number()
    }
 
    .method public hidebysig specialname instance int32
        get_Number() cil managed
    {
        .maxstack  8
 
        // variable generated by compiler
        .locals ([0] int32 tmp)
 
        // *************************************************
        // return m_n;
        // *************************************************
        ldarg.0
                  // load argument 0 (this pointer)
        ldfld      int32 SampleClass::m_n
                  // load field of object pointed by stack value
        stloc.0
                  // store in variable 0
        ldloc.0
                  // load variable 0 onto stack (return value
                  // of function)
 
        ret
    }
 
    // String property
    .property instance string String()
    {
        .get instance string SampleClass::get_String()
    }
    
    .method public hidebysig specialname instance string
            get_String() cil managed
    {
        .maxstack  8
 
        // variable generated by compiler
        .locals ([0] string tmp)
 
        ldarg.0
             // load argument 0 (this pointer)
        ldfld      string SampleClass::m_s
             // load field of object pointed by stack value
        stloc.0
             // store in variable 0
        ldloc.0
             // load variable 0 onto stack (return value
             // of function)
        ret
    }
}

.class private auto ansi beforefieldinit Class1
       extends [mscorlib]System.Object
{
    // public default constructor
    .method public hidebysig specialname rtspecialname 
        instance void  .ctor() cil managed
    {
        .maxstack  8
 
        // *************************************************
        // Call base class constructor
        // *************************************************
        ldarg.0
                          // load this pointer
        call       instance void [mscorlib]System.Object::.ctor()
                          // call Object constructor
 
        ret
    }
 
    // Main function
    .method private hidebysig static void  Main(string[] args)
            cil managed
    {
        // this method is the entry point to the application
        .entrypoint
 
        // Custom attribute
        .custom instance void [mscorlib]System.
                STAThreadAttribute::.ctor() = ( 01 00 00 00 )
 
        .maxstack  8
        .locals ([0] class SampleClass o,
                 [1] int32 tmp)          // generated by compiler
        // *************************************************
        // o = new SampleClass(1, "Sample");
        // *************************************************
        ldc.i4.1                        // load constant 1 onto
                                        // stack
        ldstr      "Sample"             // load string constant
                                        // onto stack
        // create new object SampleClass passing 2 parameters
        // from stack.
        // Load reference to created object onto stack
        newobj     instance void SampleClass::.ctor(int32, string)
        stloc.0                         // store to variable 0
        // *************************************************
        // Access static class member
        // Console.WriteLine(SampleClass.nStatic.ToString());
        // *************************************************
        // Load the address of the static field on the stack
        ldsflda    int32 SampleClass::nStatic
        // call Int32::ToString for object from stack
        call       instance string [mscorlib]System.Int32
                            ::ToString()
        // call static WriteLine passing string from stack
        // as parameter
        call       void [mscorlib]System.Console
                   ::WriteLine(string)
 
        // *************************************************
        // Call non-static class function
        // Console.WriteLine(o.Number.ToString());
        // *************************************************
        ldloc.0                 // load variable 0
        // call function for object from stack
        call   instance int32 SampleClass::get_Number()
        stloc.1                         // store to variable 1
        ldloca.s  tmp                   // load address to stack
        call       instance string [mscorlib]System.Int32
                            ::ToString()
        call       void [mscorlib]System.Console
                        ::WriteLine(string)
 
        // *************************************************
        // Call non-static class member
        // Console.WriteLine(o.String);
        // *************************************************
        ldloc.0
        callvirt   instance string SampleClass::get_String()
        call       void [mscorlib]System.Console
                        ::WriteLine(string)
 
        // *************************************************
        ldstr "Press Enter to continue"
        call   void [mscorlib]System.Console
                    ::WriteLine(class System.String)
        call int32 [mscorlib]System.Console::Read()
        pop
        // *************************************************
 
        ret
    }
}

