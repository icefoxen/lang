Extensions-2.6. Socket Streams
Platform dependent: UNIX, Win32 platforms only.

(SOCKET:SOCKET-SERVER &OPTIONAL [port-or-socket])

    This function creates a socket, binds a port to the socket, and then listens for connect attempts. The server exists to watch for client connect attempts. The optional argument is either a port (positive FIXNUM) or a SOCKET:SOCKET-STREAM (from whose peer the connections will be made).
(SOCKET:SOCKET-SERVER-CLOSE socket-server)

    Closes down the server socket.
(SOCKET:SOCKET-SERVER-PORT socket-server)

    Returns the port which was bound using SOCKET:SOCKET-SERVER.
(SOCKET:SOCKET-WAIT socket-server &OPTIONAL [seconds [microseconds]])

    Wait for a fixed time for a connection on the socket-server (a SOCKET:SOCKET-SERVER). Without a timeout argument, SOCKET:SOCKET-WAIT blocks indefinitely. When timeout is zero, poll.
(SOCKET:SOCKET-ACCEPT socket-server &KEY :ELEMENT-TYPE :EXTERNAL-FORMAT :BUFFERED)

    Creates the server-side two-way stream for the connection.
(SOCKET:SOCKET-CONNECT port &OPTIONAL [host] &KEY :ELEMENT-TYPE :EXTERNAL-FORMAT :BUFFERED)

    Attempts to create a client-side two-way SOCKET:SOCKET-STREAM. Blocks until the server accepts the connections.
(SOCKET:SOCKET-STATUS socket-stream-or-list &OPTIONAL [seconds [microseconds]])

    Checks whether it is possible to read from or write to a SOCKET:SOCKET-STREAM or whether a connection is available on a SOCKET:SOCKET-SERVER without blocking. (For the cognoscenti: this is the interface to select(2)). This is similar to LISTEN, which checks only one stream and only for input, and SOCKET:SOCKET-WAIT, which works only with SOCKET:SOCKET-SERVERs.

    Possible values of socket-stream-or-list

    SOCKET:SOCKET-STREAM or SOCKET:SOCKET-SERVER

        Returns T if a connection on the SOCKET:SOCKET-SERVER is available; or :INPUT, :OUTPUT or :IO if some input/output is possible on the SOCKET:SOCKET-STREAM
    (SOCKET:SOCKET-STREAM . direction)

        Return the appropriate keyword (:INPUT, :OUTPUT or :IO) if some input/output is possible on the SOCKET:SOCKET-STREAM in the specified direction (which should be one of :INPUT, :OUTPUT or :IO).
    a list of the above

        Return a list of values, one for each element of the argument list (a la MAPCAR)

    The optional arguments specify the timeout. NIL means wait forever, 0 means poll. Note that this function never waits for input or output to arrive, only for information on input or output presense (so that READ-CHAR or WRITE-CHAR will not block) to become available (or a connection to become possible).

    For each SOCKET:SOCKET-STREAM this function returns

    Return values of SOCKET:SOCKET-STATUS

    NIL

        when no information is available or no operation is possible
    :ERROR

        when an i/o operation will cause an error
    :INPUT

        when you can only read from the stream
    :OUTPUT

        when you can only write to the stream
    :IO

        when you can both read from and write to the stream
(SOCKET:SOCKET-STREAM-HOST socket-stream), (SOCKET:SOCKET-STREAM-PORT socket-stream)

    These two functions return information about the SOCKET:SOCKET-STREAM. For a server, SOCKET:SOCKET-STREAM-HOST returns NIL.
(SOCKET:SOCKET-SERVICE-PORT &OPTIONAL service-name (protocol "tcp"))

    A convenience function for looking up a port given the service name. It returns the servent struct as multiple values (name, list of aliases, port, protocol) for the given service-name and protocol, or all services as the list of vectors of LENGTH 4, if service-name is not given or is :DEFAULT or NIL.
(SOCKET:SOCKET-STREAM-PEER socket-stream [do-not-resolve-p])

    Given a stream, this function returns the name of the host on the opposite side of the connection and its port number; the server-side can use this to see who connected.

    When the optional second argument is non-NIL, the hostname resolution is disabled and just the IP address is returned, without the FQDN (Fully Qualified Domain Name).
(SOCKET:SOCKET-STREAM-LOCAL socket-stream [do-not-resolve-p])

    The dual to SOCKET:SOCKET-STREAM-PEER - same information, host name and port number, but for the local host. The difference from SOCKET:SOCKET-STREAM-HOST and SOCKET:SOCKET-STREAM-PORT is that this function asks the OS (and thus returns the correct trusted values) while the other two are just accessors to the internal data structure, and basically return the arguments given to the function which created the SOCKET:SOCKET-STREAM.
Extensions-2.7. System Calls

When CLISP is configured with an option --with-export-syscalls, some system calls are available from lisp, in package "POSIX".

(posix:resolve-host-ipaddr &OPTIONAL host)

    Returns the hostent struct (name, list of aliases, list of IP addresses as dotted quads (for IPv4) or coloned octets (for IPv6), address type - IPv4 or IPv6). When host is omitted or :DEFAULT, return the data for the current host. When host is given and is NIL, all the host database is returned as a list (this would be the contents of the /etc/hosts file on a UNIX system or ${windir}/system32/etc/hosts on a Win32 system).
(posix:file-stat pathname &OPTIONAL link-p)

    Return the stat struct. pathname can be a STREAM, a PATHNAME, a STRING or a NUMBER (on a UNIX system, meaning file descriptor). The first slot of the struct returned is the string or the number on which stat(2)/fstat(2)/lstat(2) was called. The other 13 slots are numbers, members of the stat struct: device, inode, protection, number of hard links, owner's UID, owner's GID, device type, total size (bytes), blocksize for filesystem I/O, number of blocks allocated, atime, mtime, ctime (as the number of seconds since 1900-01-01). If the system does not support a particular field (e.g., Win32 does not have hard links), NIL (or the default, like 1 for the number of hard links for Win32 or DOS) is returned.

    [UNIX systems only at this time, patches are welcome.]
(posix:user-data &OPTIONAL user)

    Return the passwd struct (name, encoded password, UID, GID, full name, home directory, shell). When user is NIL, return all users. When user is :DEFAULT or not supplied, return the information about the current user. If the system does not support a particular field (e.g., Win32 does not have a concept of a shell), NIL (or the default, like c:\command.com for DOS) is returned.

    [UNIX systems only at this time, patches are welcome.]
(posix:sysinfo)

    Return a struct describing the OS, derived from uname(2) and sysconf(3).
(posix:resource-usage-limits)

    Return 3 structs describing the resources usage and limits, derived from getrlimit(2) and getrusage(3).
(posix:erf real) (posix:erfc real) (posix:j0 real) (posix:j1 real) (posix:jn integer real) (posix:y0 real) (posix:y1 real) (posix:yn integer real) (posix:gamma real) (posix:lgamma real)

    Compute the error functions, Bessel functions and Gamma. These functions are required by the POSIX standard and should be available in libm.so. Please note that these functions do not provide lisp-style error handling and precision, and do all the computations at the double float level.

    [UNIX systems only at this time, patches are welcome.]


Extensions-2.10. Shell, Pipes and Printing
Shell

Platform dependent: UNIX, Acorn, DOS, OS/2, platforms only.

    (EXT:EXECUTE program arg1 arg2 ...) executes an external program. Its name is program (a full pathname). It is given the strings arg1, arg2, ... as arguments.
Platform dependent: Amiga platforms only.

    (EXT:EXECUTE command) executes a given command using the operating system's shell.
Platform dependent: UNIX, Amiga, Acorn, DOS, OS/2, Win32 platforms only.

    (EXT:SHELL [command]) calls the operating system's shell. (EXT:SHELL) calls the shell for interactive use. (EXT:SHELL command) calls the shell only for execution of the one given command.
Platform dependent: UNIX, OS/2, Win32 platforms only.

    The functions EXT:RUN-SHELL-COMMAND and EXT:RUN-PROGRAM are the general interface to EXT:SHELL and the above:

    (EXT:RUN-SHELL-COMMAND command &KEY :INPUT :OUTPUT :IF-OUTPUT-EXISTS :WAIT) runs a shell command (including shell built-in commands, like DIR on Win32/OS/2 and for/do/done on UNIX).

    (EXT:RUN-PROGRAM program &KEY :ARGUMENTS :INPUT :OUTPUT :IF-OUTPUT-EXISTS :WAIT) runs an external program.

    command

        the shell command.

        Platform dependent: UNIX platforms only.

            The shell the command is passed to is the value of the environment variable SHELL, which normally is /bin/sh. The command should be a "simple command"; a "command list" should be enclosed in "{ ... ; }" (for /bin/sh) or "( ... )" (for /bin/csh).
    program

        the program. The directories listed in the PATH environment variable will be searched for it.
    :ARGUMENTS

        a list of arguments (strings) that are given to the program.
    :INPUT

        where the program's input is to come from: either :TERMINAL (the standard input) or :STREAM (a Lisp stream to be created) or a pathname (an input file) or NIL (no input at all).
    :OUTPUT

        where the program's output is to be sent to: either :TERMINAL (the standard output) or :STREAM (a Lisp stream to be created) or a pathname (an output file) or NIL (ignore the output).
    :IF-OUTPUT-EXISTS

        what to do if the :OUTPUT file already exists. The possible values are :OVERWRITE, :APPEND, :ERROR, with the same meaning as for OPEN.
    :WAIT

        wether to wait for program termination or not (this is useful when no i/o to the process is needed).
    :MAY-EXEC

        pass exec to the underlying shell (UNIX only).
    :INDIRECTP

        use a shell to run the command, e.g., (EXT:RUN-PROGRAM "dir" :indirectp T) will run the shell built-in command DIR. (Win32/OS/2 only).

    If :STREAM was specified for :INPUT or :OUTPUT, a Lisp stream is returned. If :STREAM was specified for :INPUT and :OUTPUT, three Lisp streams are returned, as for the function EXT:MAKE-PIPE-IO-STREAM. This use of EXT:RUN-PROGRAM can cause deadlocks, see EXT:MAKE-PIPE-IO-STREAM.
Pipes

Platform dependent: UNIX, OS/2, Win32 platforms only.

    (EXT:MAKE-PIPE-INPUT-STREAM command &KEY :ELEMENT-TYPE :EXTERNAL-FORMAT :BUFFERED)

        returns an input stream that will supply the output from the execution of the given operating system command.
    (EXT:MAKE-PIPE-OUTPUT-STREAM command &KEY :ELEMENT-TYPE :EXTERNAL-FORMAT :BUFFERED)

        returns an output stream that will pass its output as input to the execution of the given operating system command.
    (EXT:MAKE-PIPE-IO-STREAM command &KEY :ELEMENT-TYPE :EXTERNAL-FORMAT :BUFFERED)

        returns three values. The first value is a bidirectional stream that will simultaneously pass its output as input to the execution of the given operating system command and supply the output from this command as input. The second and third value will be the input stream and the output stream that make up the I/O stream, respectively. Note that they must be closed individually.

        Warning: Improper use of this function can lead to deadlocks. Use it at your own risk!

        A deadlock occurs if the command and your program either both try to read from each other at the same time or both try to write to each other at the same time. To avoid deadlocks, it is recommended that you fix a protocol between the command and your program and avoid any hidden buffering: use READ-CHAR, READ-CHAR-NO-HANG, LISTEN instead of READ-LINE and READ on the input side, and complete every output operation by a FINISH-OUTPUT. The same cautions must apply to the called command as well.
